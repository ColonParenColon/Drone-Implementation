
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.Timer;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
/**
 *
 * @author cac65
 */



class TreeListener implements TreeModelListener
{
    public void treeNodesChanged(TreeModelEvent e)
    {
        DefaultMutableTreeNode node;
        node = (DefaultMutableTreeNode) (e.getTreePath().getLastPathComponent());
        
        int index = e.getChildIndices()[0];
        node = (DefaultMutableTreeNode) (node.getChildAt(index));
    }
    public void treeNodesInserted(TreeModelEvent e)
    {
    }
    public void treeNodesRemoved(TreeModelEvent e)
    {
    }
    public void treeStructureChanged(TreeModelEvent e)
    {
    }
}
public class MainFrame extends javax.swing.JFrame {
    
private static MainFrame singletonFrame = null;    
    
public static synchronized MainFrame getInstance()
{
    if(singletonFrame == null)
        singletonFrame = new MainFrame();
    
    return singletonFrame;
}

int index = 1;
int x = 0;
int y = 0;
boolean end = false;
boolean atLocation = false;
boolean scanEnd = false;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        rootNode = new DefaultMutableTreeNode("Root");
        treeModel = new DefaultTreeModel(rootNode);
        treeDisplay = new JTree(treeModel);
        AddItemButton = new javax.swing.JToggleButton();
        ItemName = new javax.swing.JTextField();
        ItemPrice = new javax.swing.JTextField();
        ItemXLoc = new javax.swing.JTextField();
        ItemYLoc = new javax.swing.JTextField();
        ItemLength = new javax.swing.JTextField();
        ItemWidth = new javax.swing.JTextField();
        ItemHeight = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ContainerSet = new javax.swing.JRadioButton();
        deleteItemButton = new javax.swing.JButton();
        editItemButton = new javax.swing.JButton();
        DrawZone = new javax.swing.JPanel();
        DroneAnim = new javax.swing.JButton();
        ItemMove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Data Things");

        treeDisplay.setEditable(true);
        treeDisplay.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        treeDisplay.setShowsRootHandles(true);
        jScrollPane3.setViewportView(treeDisplay);

        AddItemButton.setText("Add Item");
        AddItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemButtonActionPerformed(evt);
            }
        });

        ItemPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemPriceActionPerformed(evt);
            }
        });

        ItemXLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemXLocActionPerformed(evt);
            }
        });

        ItemYLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemYLocActionPerformed(evt);
            }
        });

        ItemWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemWidthActionPerformed(evt);
            }
        });

        jLabel3.setText("Name:");

        jLabel4.setText("Price:");

        jLabel5.setText("X-coordinate:");

        jLabel6.setText("Y-Coordinate:");

        jLabel7.setText("Length:");

        jLabel8.setText("Width:");

        jLabel9.setText("Height:");

        ContainerSet.setText("Item Container");
        ContainerSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerSetActionPerformed(evt);
            }
        });

        deleteItemButton.setText("Delete Item");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        editItemButton.setText("Edit Item");
        editItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editItemButtonActionPerformed(evt);
            }
        });

        DrawZone.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout DrawZoneLayout = new javax.swing.GroupLayout(DrawZone);
        DrawZone.setLayout(DrawZoneLayout);
        DrawZoneLayout.setHorizontalGroup(
            DrawZoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );
        DrawZoneLayout.setVerticalGroup(
            DrawZoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        DroneAnim.setText("Scan Field");
        DroneAnim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DroneAnimActionPerformed(evt);
            }
        });

        ItemMove.setText("Go To Item");
        ItemMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemMoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(editItemButton)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ItemMove, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(DroneAnim, javax.swing.GroupLayout.Alignment.TRAILING)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemXLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemYLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ItemLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(ContainerSet)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddItemButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteItemButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel4)
                                .addGap(43, 43, 43)
                                .addComponent(ItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(DrawZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DroneAnim)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ItemMove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editItemButton))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddItemButton)
                            .addComponent(deleteItemButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(ItemXLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(34, 34, 34))
                                    .addComponent(jLabel7))
                                .addGap(34, 34, 34))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ItemYLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ItemLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(ItemWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ItemHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ContainerSet)
                        .addGap(0, 131, Short.MAX_VALUE))
                    .addComponent(DrawZone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemButtonActionPerformed
        String nameIn = ItemName.getText();
        int priceIn = Integer.parseInt(ItemPrice.getText());
        int xLocIn = Integer.parseInt(ItemXLoc.getText());
        int yLocIn = Integer.parseInt(ItemYLoc.getText());
        int lengthIn = Integer.parseInt(ItemLength.getText());
        int widthIn = Integer.parseInt(ItemWidth.getText());
        int HeightIn = Integer.parseInt(ItemHeight.getText());
        boolean ContainerIn = ContainerSet.isSelected();
        
        if(ContainerSet.isSelected())
        {
            //make container
        }
        if(!ContainerSet.isSelected())
        {
            Item ItemO = new Item();
            ItemO.addItem(nameIn, priceIn, xLocIn, yLocIn, lengthIn, widthIn, HeightIn);
            
            addObject(ItemO);
            
            //Graphics g = DrawZone.getGraphics();
            //Graphics2D g2d = (Graphics2D) g;
            //g2d.drawRect(ItemO.getXLoc(), ItemO.getYLoc(), ItemO.getWidth(), ItemO.getLength());
            repaintCanvas(rootNode);
            
        }
    }//GEN-LAST:event_AddItemButtonActionPerformed

    private void ItemPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemPriceActionPerformed

    private void ItemXLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemXLocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemXLocActionPerformed

    private void ContainerSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerSetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ContainerSetActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        removeObject();
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void ItemYLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemYLocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemYLocActionPerformed

    private void ItemWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemWidthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemWidthActionPerformed

    private void editItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editItemButtonActionPerformed
        TreePath selectedObject = treeDisplay.getSelectionPath();
        DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) (selectedObject.getLastPathComponent());
        
        Item temp = (Item) currentNode.getUserObject();
        
        String nameIn = ItemName.getText();
        int priceIn = Integer.parseInt(ItemPrice.getText());
        int xLocIn = Integer.parseInt(ItemXLoc.getText());
        int yLocIn = Integer.parseInt(ItemYLoc.getText());
        int lengthIn = Integer.parseInt(ItemLength.getText());
        int widthIn = Integer.parseInt(ItemWidth.getText());
        int HeightIn = Integer.parseInt(ItemHeight.getText());
        
        temp.addItem(nameIn, priceIn, xLocIn, yLocIn, lengthIn, widthIn, HeightIn);
        
        currentNode.setUserObject(temp);
        
        temp = (Item) currentNode.getUserObject();
        
    }//GEN-LAST:event_editItemButtonActionPerformed

    private void DroneAnimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DroneAnimActionPerformed
        DroneToPosition(0, 0, true);
        
        end = false;
        scanEnd = false;
    }//GEN-LAST:event_DroneAnimActionPerformed

    private void ItemMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemMoveActionPerformed
        TreePath selectedObject = treeDisplay.getSelectionPath();
        DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) (selectedObject.getLastPathComponent());
        
        Item temp = (Item) currentNode.getUserObject();
        
        int xLoc = temp.getXLoc();
        int yLoc = temp.getYLoc();
        
        DroneToPosition(xLoc, yLoc, false);
        
    }//GEN-LAST:event_ItemMoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new MainFrame().setVisible(true);
                MainFrame singleFrame = MainFrame.getInstance();
                singleFrame.setVisible(true);
            }
        });
    }
    
    public void removeObject()
    {
        TreePath selectedObject = treeDisplay.getSelectionPath();
        if(selectedObject != null)
        {
            DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) (selectedObject.getLastPathComponent());
            MutableTreeNode parent = (MutableTreeNode) (currentNode.getParent());
            if(parent != null)
            {
                treeModel.removeNodeFromParent(currentNode);
            }
        }
        return;
    }
    
    public DefaultMutableTreeNode addObject(Item child)
    {
        DefaultMutableTreeNode parentNode = null;
        TreePath parentPath = treeDisplay.getSelectionPath();
        
        if(parentPath == null)
        {
            parentNode = rootNode;
        }
        else
        {
            parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
        }
        return addObject(parentNode, child, true);
    }
    
    public DefaultMutableTreeNode addObject (DefaultMutableTreeNode parent, Item child)
    {
        return addObject(parent, child, false);
    }
    public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Item child, boolean visible)
    {
        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);
        
        if (parent == null)
        {
            parent = rootNode;
        }
        
        treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
        
        if(visible)
        {
            treeDisplay.scrollPathToVisible(new TreePath(childNode.getPath()));
        }
        return childNode;
        
        
    }
    
    public void repaintCanvas(DefaultMutableTreeNode node)
    {
        if(node != rootNode)
        {
        Item temp = (Item) node.getUserObject();
        
        Graphics g = DrawZone.getGraphics();
        Graphics2D g2d = (Graphics2D) g;
        g2d.drawRect(temp.getXLoc(), temp.getYLoc(), temp.getWidth(), temp.getLength());
        }
        Enumeration children = node.children();
        if(children != null)
        {
            while(children.hasMoreElements())
                    {
                        repaintCanvas((DefaultMutableTreeNode) children.nextElement());
                    }
        }
    }
    
    public void DroneToPosition (int xLoc, int yLoc, boolean scan)
    {
        atLocation = false;
        end = false;
        
        Graphics g = DrawZone.getGraphics();
        Graphics2D g2d = (Graphics2D) g;
        
        g2d.setColor(Color.red);
        g2d.drawRect(x, y, 50, 50);
         Timer timer = new Timer(10, new ActionListener()
        {
            @Override
            public void actionPerformed (ActionEvent e)
            {
                if(atLocation && scan)
                {
                    
                    if(y >= 400)
                    {
                        repaintCanvas(rootNode);
                        atLocation = false;
                        scanEnd = true;
                    }
                    
                    if(!end && !scanEnd)
                    {
                        if(x >= 300)
                        {
                            g2d.clearRect(x, y, 51, 51);
                            y += 10;
                            g2d.drawRect(x, y, 50, 50);
                            end = true;
                        }
                        else
                        {
                            g2d.clearRect(x, y, 51, 51);
                            x += 10;
                            g2d.drawRect(x, y, 50, 50);
                        }
                    }
                   
                    if(end && !scanEnd)
                    {
                        if(x <= 0)
                        {
                            g2d.clearRect(x, y, 51, 51);
                            y += 10;
                            g2d.drawRect(x, y, 50, 50);
                            end = false;
                        }
                        else
                        {
                            g2d.clearRect(x, y, 51, 51);
                            x -= 10;
                            g2d.drawRect(x, y, 50, 50);
                        }
                    }
                }
                else if(atLocation && !scan)
                {
                    ((Timer)e.getSource()).stop();
                }
                
                if(!atLocation)
                {
                    if(x <= xLoc)
                    {
                        g2d.clearRect(x, y, 51, 51);
                        x += 10;
                        g2d.drawRect(x, y, 50, 50);
                    }
                    if(x >= xLoc)
                    {
                        g2d.clearRect(x, y, 51, 51);
                        x -= 10;
                        g2d.drawRect(x, y, 50, 50);
                    }
                    if(y <= yLoc)
                    {
                        g2d.clearRect(x, y, 51, 51);
                        y += 10;
                        g2d.drawRect(x, y, 50, 50);
                    }
                    if(y >= yLoc)
                    {
                        g2d.clearRect(x, y, 51, 51);
                        y -= 10;
                        g2d.drawRect(x, y, 50, 50);
                    }

                    if(Math.abs(x - xLoc) <= 10 && Math.abs(y - yLoc) <= 10)
                    {
                        atLocation = true;
                        
                        if(scanEnd && scan)
                        {
                            ((Timer)e.getSource()).stop();
                        }
                    }
                }
                    
                    repaintCanvas(rootNode);
            }
        });
        timer.start();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton AddItemButton;
    private javax.swing.JRadioButton ContainerSet;
    private javax.swing.JPanel DrawZone;
    private javax.swing.JButton DroneAnim;
    private javax.swing.JTextField ItemHeight;
    private javax.swing.JTextField ItemLength;
    private javax.swing.JButton ItemMove;
    private javax.swing.JTextField ItemName;
    private javax.swing.JTextField ItemPrice;
    private javax.swing.JTextField ItemWidth;
    private javax.swing.JTextField ItemXLoc;
    private javax.swing.JTextField ItemYLoc;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JButton editItemButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTree treeDisplay;
    // End of variables declaration//GEN-END:variables
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
}
